"Logged Hispanic/Latinx Percentage = 0.3",
"Logged Hispanic/Latinx Percentage = 1.85",
"Logged Hispanic/Latinx Percentage = 3.40")) +
theme_bw() +
theme(axis.title = element_text(face = "bold"),
legend.position = "top",
legend.box = "vertical",
legend.direction = "horizontal")
predictions(temp, variables = list(stdlagconabst_pol2_dup = seq(-1,1, by  = 1),
lterror_nright = seq(1.8,3.2, by = 0.175),
lhisp_count = seq(-2.8,3.4, by = 1.55))) %>%
select(rowid, predicted, stdlagconabst_pol2_dup, lterror_nright, lhisp_count) %>%
mutate(predicted = (exp(predicted)/(1 + exp(predicted)))) %>%
group_by(lhisp_count, stdlagconabst_pol2_dup, lterror_nright) %>%
summarise(predicted_sum = mean(predicted)) %>%
ggplot(aes(x = lterror_nright, y = predicted_sum,
linetype = as.factor(stdlagconabst_pol2_dup),
group = interaction(as.factor(lhisp_count), as.factor(stdlagconabst_pol2_dup)),
color = as.factor(lhisp_count))) +
geom_line() +
labs(y = '"Borders and Immigration" Grievance Probability',
x = "Number of Non-Right Wing Terror Events (logged)",
color = "", linetype = "") +
scale_linetype_discrete(breaks = c(-1,0,1),
labels = c("-1 SD Construal Style",
"Mean Construal Style",
"+1 SD Construal Style")) +
scale_color_manual(breaks = c(-2.80,-1.25,0.30,1.85,3.40),
values = c("#1696d2","#fdbf11","#ec008b","#55b748","#db2b27"),
labels = c("Logged Hispanic/Latinx Percentage = -2.8",
"Logged Hispanic/Latinx Percentage = -1.25",
"Logged Hispanic/Latinx Percentage = 0.3",
"Logged Hispanic/Latinx Percentage = 1.85",
"Logged Hispanic/Latinx Percentage = 3.40")) +
theme_bw() +
theme(axis.title = element_text(face = "bold"),
legend.position = "top",
legend.box = "vertical",
legend.direction = "horizontal")
predictions(temp, variables = list(stdlagconabst_pol2_dup = seq(-1,1, by  = 1),
lterror_nright = seq(1.8,3.2, by = 0.175),
lhisp_count = seq(-2.8,3.4, by = 1.55))) %>%
select(rowid, predicted, stdlagconabst_pol2_dup, lterror_nright, lhisp_count) %>%
mutate(predicted = (exp(predicted)/(1 + exp(predicted)))) %>%
group_by(lhisp_count, stdlagconabst_pol2_dup, lterror_nright) %>%
summarise(predicted_sum = mean(predicted)) %>%
ggplot(aes(x = lterror_nright, y = predicted_sum,
linetype = as.factor(stdlagconabst_pol2_dup),
group = interaction(as.factor(lhisp_count), as.factor(stdlagconabst_pol2_dup)),
color = as.factor(lhisp_count))) +
geom_line() +
labs(y = '"Borders and Immigration" Grievance Probability',
x = "Number of Non-Right Wing Terror Events (logged)",
color = "", linetype = "") +
scale_linetype_discrete(breaks = c(-1,0,1),
labels = c("-1 SD Construal Style",
"Mean Construal Style",
"+1 SD Construal Style")) +
scale_color_manual(breaks = c(-2.80,-1.25,0.30,1.85,3.40),
values = c("#1696d2","#fdbf11","#ec008b","#55b748","#db2b27"),
labels = c("Logged Hispanic/Latinx Percentage = -2.8",
"Logged Hispanic/Latinx Percentage = -1.25",
"Logged Hispanic/Latinx Percentage = 0.3",
"Logged Hispanic/Latinx Percentage = 1.85",
"Logged Hispanic/Latinx Percentage = 3.40")) +
theme_bw() +
theme(axis.title = element_text(face = "bold"),
legend.position = "top",
legend.box = "vertical",
legend.direction = "horizontal") +
facet_grid(~as.factor(lhisp_count))
wno_data$hisp_count <- wno_data$population_y1000 * wno_data$hisp_interprop
wno_data$lhisp_count <- log(wno_data$hisp_count)
temp <- plm(lo_immigrant_dup ~ stdlagconabst_pol2_dup*lterror_nright*lhisp_count + laglo_immigrant_dup +
per_repub1_dup + lo_vcrime_rate + factor(reform) +
factor(p2001) + logvocality_dup + word_count_dup +
factor(admin42),
data = wno_data[wno_data$doc_id != "CDL_1997_dearconcamer.txt" &
wno_data$doc_id != "CDL_1995_report.txt",],,
index = c("org2","year"),
model = "within")
predictions(temp, variables = list(stdlagconabst_pol2_dup = seq(-1,1, by  = 1),
lterror_nright = seq(1.8,3.2, by = 0.175),
lhisp_count = seq(-2.8,3.4, by = 1.55))) %>%
select(rowid, predicted, stdlagconabst_pol2_dup, lterror_nright, lhisp_count) %>%
mutate(predicted = (exp(predicted)/(1 + exp(predicted)))) %>%
group_by(lhisp_count, stdlagconabst_pol2_dup, lterror_nright) %>%
summarise(predicted_sum = mean(predicted)) %>%
ggplot(aes(x = lterror_nright, y = predicted_sum,
linetype = as.factor(stdlagconabst_pol2_dup),
group = interaction(as.factor(lhisp_count), as.factor(stdlagconabst_pol2_dup)),
color = as.factor(lhisp_count))) +
geom_line() +
labs(y = '"Borders and Immigration" Grievance Probability',
x = "Number of Non-Right Wing Terror Events (logged)",
color = "", linetype = "") +
scale_linetype_discrete(breaks = c(-1,0,1),
labels = c("-1 SD Construal Style",
"Mean Construal Style",
"+1 SD Construal Style")) +
scale_color_manual(breaks = c(-2.80,-1.25,0.30,1.85,3.40),
values = c("#1696d2","#fdbf11","#ec008b","#55b748","#db2b27"),
labels = c("Logged Hispanic/Latinx Percentage = -2.8",
"Logged Hispanic/Latinx Percentage = -1.25",
"Logged Hispanic/Latinx Percentage = 0.3",
"Logged Hispanic/Latinx Percentage = 1.85",
"Logged Hispanic/Latinx Percentage = 3.40")) +
theme_bw() +
theme(axis.title = element_text(face = "bold"),
legend.position = "top",
legend.box = "vertical",
legend.direction = "horizontal") +
facet_grid(~as.factor(lhisp_count))
fit.2[[2]]
fit.2[[2]] %>% summary()
fit.2[[2]]$ll_fe_only
fit.2[[2]]$coeftable
fit.2[[2]]$sq.cor
fit.2[[2]]
fit.2[[2]]$ssr_fe_only
fit.2[[2]]$ssr
fit.2[[2]]$cov.unscaled
fit.2[[2]]$cov.iid
fit.2[[2]]$hessian
fit.2[[2]]$scores
fit.2[[2]]$sumFE
fit.2[[2]]$model_info
fit.2[[2]] %>% fitstat()
r2(fit.2[[2]])
modelsummary(fit.2)
rmse(fit.2[[2]])
summary(fit.2[[2]])$rmse
fit.2[[2]]$fml
fit.2[[2]]$fixef.tol
fit.2[[2]]$fixef_vars
fit.2[[2]]$fixef_id
fit.2[[2]]$coefficients
fit.2[[2]]$multicol
fit.2[[2]]$sigma2
sqrt(0.1121944)
fit.2[[2]]$fitted.values
sd(wno_data$lo_immigrant_dup - fit.2[[2]]$fitted.values)
sd(wno_data$lo_immigrant_dup - fit.2[[1]]$fitted.values)
sd(wno_data$lo_immigrant_dup - fit.2[[2]]$fitted.values)
sd(wno_data$lo_immigrant_dup - fit[[3]]$fitted.values)
fit <- list(
feols(lo_immigrant_dup ~ terror_nr | org2, data = wno_data),
feols(lo_immigrant_dup ~ stdlagconabst_pol2_dup*terror_nr | org2, data = wno_data),
feols(lo_immigrant_dup ~ stdlagconabst_pol2_dup*terror_nr + laglo_immigrant_dup +
per_repub1_dup + lo_vcrime_rate + factor(reform) +
factor(p2001) + logvocality_dup + word_count_dup +
factor(admin42) | org2, data = wno_data)
)
sd(wno_data$lo_immigrant_dup - fit[[3]]$fitted.values)
modelsummary(fit)
sd(wno_data$lo_immigrant_dup - fit[[2]]$fitted.values)
sd(wno_data$lo_immigrant_dup - fit[[1]]$fitted.values)
r2(fit)
r2(fit[[1:3]])
lapply(fit, r2)
lapply(fit, function(x) sd(wno_data$lo_immigrant_dup - fit[[x]]$fitted.values))
apply(fit, function(x) sd(wno_data$lo_immigrant_dup - fit[[x]]$fitted.values))
sapply(fit, function(x) sd(wno_data$lo_immigrant_dup - fit[[x]]$fitted.values))
lapply(fit, function(x) sd(wno_data$lo_immigrant_dup - x$fitted.values))
sd(wno_data$lo_immigrant_dup - fit[[1]]$fitted.values)
sd(wno_data$lo_immigrant_dup - fit[[2]]$fitted.values)
sd(wno_data$lo_immigrant_dup - fit[[3]]$fitted.values)
1 - (vd.re$vcov[1]/(vd.re$vcov[1] + vd.re$vcov[2])) #1 - ICC
(vd.re$vcov[2]/(vd.re$vcov[1] + vd.re$vcov[2]))
vd.re$vcov[2]/(vd.re$vcov[1] + vd.re$vcov[2]) #1 - ICC
pacman::p_load(tidyverse, plm, permute, data.table,
marginaleffects, ggpubr, forcats,
freqtables, lme4, broom.mixed, psych,
fixest, modelsummary,
install = T)
getwd9
getwd()
source("perm_table.R") #function to perform stratified Monte Carlo permutation tests
source("perm_table.R") #function to perform stratified Monte Carlo permutation tests
source("perm_table.R") #function to perform stratified Monte Carlo permutation tests
View(perm_table)
wno_data <- readRDS("wno_data.rds") #Main data, processed and ready to go
#Note: Two other models are in the appendix section below: one with just
#the environmental shock DV, and another that adds construal style
#and the envr*construal interaction
model <- plm(lo_immigrant_dup ~ stdlagconabst_pol2_dup*terror_nr + laglo_immigrant_dup +
per_repub1_dup + lo_vcrime_rate + factor(reform) +
factor(p2001) + logvocality_dup + word_count_dup +
factor(admin42),
data = wno_data,
index = c("org2","year"),
model = "within")
mat <- perm_table(data = wno_data, model = model,
perm_v = "lo_immigrant_dup", statistic = "coefficients",
strata_v = "org2", seed = 123)
mat
mat <- perm_table(data = wno_data, model = model,
perm_v = "lo_immigrant_dup", statistic = "coefficients",
strata_v = "org2", alpha = .001, seed = 123)
mat
data("mtcars")
View(mtcars)
View(mtcars)
#without stratified permutations
model <- lm(mpg ~ disp + cyl + wt + factor(vs), data = mtcars)
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_m = 500,
alternative = "two.sided", alpha = .01,
seed = 8675309)
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "two.sided", alpha = .01,
seed = 8675309)
model
View(mtcars)
#withstratified permutations
perm_table(data = mtcars, model = model, perm_v = "mpg", strata = "gear",
statistic = "coefficients", perm_n = 500,
alternative = "two.sided", alpha = .01,
seed = 8675309)
#left-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "lower", alpha = .01,
seed = 8675309)
#right-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "lower", alpha = .01,
seed = 8675309)
#right-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "upper", alpha = .01,
seed = 8675309)
#right-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "upper", alpha = .01,
seed = 8675309)
#left-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "lower", alpha = .01,
seed = 8675309)
#right-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "upper", alpha = .01,
seed = 8675309)
perm_table <- function(data, model, perm_v, strata_v = NULL, statistic,
perm_n = 1000, alternative = "all", alpha = 0.05,
seed = NULL) {
if (length(model[[statistic]]) >= 2) {
set.seed(seed)
perms <- data.frame(matrix(ncol = perm_n, nrow = nrow(data)))
colnames(perms) <- rep(perm_v, perm_n)
if (is.null(strata_v) == F) {
control <- how(plots = Plots(strata = data[[strata_v]]))
perm_list <- list()
for (i in 1:perm_n) {
perms[,i] <- data[[perm_v]][shuffle(length(data[[perm_v]]),
control = control)]
perm_list[[i]] <- cbind(perms[i], data[, !names(data) %in% perm_v])
}
}
if (is.null(strata_v) == T) {
perm_list <- list()
for (i in 1:perm_n) {
perms[,i] <- data[[perm_v]][shuffle(length(data[[perm_v]]))]
perm_list[[i]] <- cbind(perms[i], data[, !names(data) %in% perm_v])
}
}
models <- list()
for (i in 1:length(perm_list)) {
models[[i]] <- update(model, . ~ ., data = perm_list[[i]])
}
perm_mat <- map_df(models, statistic, .id = "id") %>%
transpose() %>%
slice(-1)
perm_mat <- sapply(perm_mat, as.numeric)
mat <- data.frame(matrix(ncol = 1, nrow = length(model[[statistic]])))
colnames(mat) <- "stat"
rownames(mat) <- names(model[[statistic]])
mat$stat <- model[[statistic]]
if (alternative == "all") {
mat$Pl <- rowSums(perm_mat <= model[[statistic]])/perm_n
mat$Pu <- rowSums(perm_mat >= model[[statistic]])/perm_n
mat$Pt <- rowSums(abs(perm_mat) >= abs(model[[statistic]]))/perm_n
mat$SEl <- sqrt((mat$Pl * (1 - mat$Pl))/perm_n)
mat$SEu <- sqrt((mat$Pu * (1 - mat$Pu))/perm_n)
mat$SEt <- sqrt((mat$Pt * (1 - mat$Pt))/perm_n)
mat$CIl_l <- mat$Pl - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
mat$CIl_u <- mat$Pl + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
mat$CIu_l <- mat$Pu - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
mat$CIu_u <- mat$Pu + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
mat$CIt_l <- mat$Pt - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
mat$CIt_u <- mat$Pt + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
}
if (alternative == "two.sided") {
mat$Pt <- rowSums(abs(perm_mat) >= abs(model[[statistic]]))/perm_n
mat$SEt <- sqrt((mat$Pt * (1 - mat$Pt))/perm_n)
mat$CIt_l <- mat$Pt - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
mat$CIt_u <- mat$Pt + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
}
if (alternative == "lower") {
mat$Pl <- rowSums(perm_mat <= model[[statistic]])/perm_n
mat$SEl <- sqrt((mat$Pl * (1 - mat$Pl))/perm_n)
mat$CIl_l <- mat$Pl - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
mat$CIl_u <- mat$Pl + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
}
if (alternative == "upper") {
mat$Pu <- rowSums(perm_mat >= model[[statistic]])/perm_n
mat$SEu <- sqrt((mat$Pu * (1 - mat$Pu))/perm_n)
mat$CIu_l <- mat$Pu - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
mat$CIu_u <- mat$Pu + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
}
mat <- mat %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
return(mat)
} else {
set.seed(seed)
perms <- data.frame(matrix(ncol = perm_n, nrow = nrow(data)))
colnames(perms) <- rep(perm_v, perm_n)
if (is.null(strata_v) == F) {
control <- how(plots = Plots(strata = data[[strata_v]]))
perm_list <- list()
for (i in 1:perm_n) {
perms[,i] <- data[[perm_v]][shuffle(length(data[[perm_v]]),
control = control)]
perm_list[[i]] <- cbind(perms[i], data[, !names(data) %in% perm_v])
}
}
if (is.null(strata_v) == T) {
perm_list <- list()
for (i in 1:perm_n) {
perms[,i] <- data[[perm_v]][shuffle(length(data[[perm_v]]))]
perm_list[[i]] <- cbind(perms[i], data[, !names(data) %in% perm_v])
}
}
models <- list()
for (i in 1:length(perm_list)) {
models[[i]] <- update(model, . ~ ., data = perm_list[[i]])
}
perm_mat <- map_df(models, statistic, .id = "id") %>%
transpose() %>%
slice(-1)
perm_mat <- sapply(perm_mat, as.numeric)
mat <- data.frame(matrix(ncol = 1, nrow = length(model[[statistic]])))
colnames(mat) <- "stat"
rownames(mat) <- names(model[[statistic]])
mat$stat <- model[[statistic]]
if (alternative == "all") {
mat$Pl <- sum(as.matrix(perm_mat <= model[[statistic]]))/perm_n
mat$Pu <- sum(as.matrix(perm_mat >= model[[statistic]]))/perm_n
mat$Pt <- sum(as.matrix(abs(perm_mat) >= abs(model[[statistic]])))/perm_n
mat$SEl <- sqrt((mat$Pl * (1 - mat$Pl))/perm_n)
mat$SEu <- sqrt((mat$Pu * (1 - mat$Pu))/perm_n)
mat$SEt <- sqrt((mat$Pt * (1 - mat$Pt))/perm_n)
mat$CIl_l <- mat$Pl - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
mat$CIl_u <- mat$Pl + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
mat$CIu_l <- mat$Pu - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
mat$CIu_u <- mat$Pu + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
mat$CIt_l <- mat$Pt - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
mat$CIt_u <- mat$Pt + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
}
if (alternative == "two.sided") {
mat$Pt <- sum(as.matrix(abs(perm_mat) >= abs(model[[statistic]])))/perm_n
mat$SEt <- sqrt((mat$Pt * (1 - mat$Pt))/perm_n)
mat$CIt_l <- mat$Pt - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
mat$CIt_u <- mat$Pt + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEt)
}
if (alternative == "lower") {
mat$Pl <- sum(as.matrix(perm_mat <= model[[statistic]]))/perm_n
mat$SEl <- sqrt((mat$Pl * (1 - mat$Pl))/perm_n)
mat$CIl_l <- mat$Pl - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
mat$CIl_u <- mat$Pl + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEl)
}
if (alternative == "upper") {
mat$Pu <- sum(as.matrix(perm_mat >= model[[statistic]]))/perm_n
mat$SEu <- sqrt((mat$Pu * (1 - mat$Pu))/perm_n)
mat$CIu_l <- mat$Pu - (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
mat$CIu_u <- mat$Pu + (qnorm(alpha/2, mean = 0, sd = 1,
lower.tail = F) * mat$SEu)
}
mat <- mat %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
return(mat)
}
}
#right-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "upper", alpha = .01,
seed = 8675309)
#left-tailed test
perm_table(data = mtcars, model = model, perm_v = "mpg",
statistic = "coefficients", perm_n = 500,
alternative = "lower", alpha = .01,
seed = 8675309)
remotes::install_gitlab("culturalcartography/text2map.corpora")
temp <- text2map.corpora::corpus_cmu_blogs100
View(wno_data)
View(temp)
temp <- text2map.corpora::corpus_envsociology
View(temp)
remotes::install_gitlab("culturalcartography/text2map.pretrained")
temp <- text2map.pretrained::stm_fiction_cohort
View(temp)
temp <- text2map.pretrained::stm_envsoc
temp
library(stm)
temp
temp$theta
temp
temp.data <- text2map.corpora::corpus_envsociology
data <- text2map.corpora::corpus_envsociology
stm <- text2map.pretrained::stm_envsoc
colnames(stm$theta)
names(stm$theta)
temp <- stm$theta
View(temp)
rowSums(stnm)
rowSums(stm)
rowSums(temp)
stm$theta$V1
stm$theta
stm$theta[[V1]]
topics <- text2map.pretrained::stm_envsoc$theta
topics[1]
topics[,1]
data <- cbind(data, topics)
View(data)
model <- lm(topics[,1] ~ journal_rank + citations + year, data = data)
model
length(topics)
ncol(topics)
data <- text2map.corpora::corpus_envsociology
topics <- text2map.pretrained::stm_envsoc$theta
colnames(topics) <- rep("topic.", 1:ncol(topics))
data <- text2map.corpora::corpus_envsociology
topics <- text2map.pretrained::stm_envsoc$theta
colnames(topics) <- rep("topic.", 1:25)
data <- text2map.corpora::corpus_envsociology
topics <- text2map.pretrained::stm_envsoc$theta
class(topics)
data <- text2map.corpora::corpus_envsociology
topics <- text2map.pretrained::stm_envsoc$theta |>
as.data.frame()
data <- text2map.corpora::corpus_envsociology
topics <- text2map.pretrained::stm_envsoc$theta |>
as.data.frame()
colnames(topics) <- rep("topic.", 1:ncol(topics))
View(topics)
ncol(topics)
rep("topic.", 1:ncol(topics))
rep("topic", 1:ncol(topics))
data <- text2map.corpora::corpus_envsociology
topics <- text2map.pretrained::stm_envsoc$theta
colnames(topics) <- paste0("topic", 1:ncol(topics))
data <- cbind(data, topics)
View(data)
#model
model <- lm(topic1 ~ journal_rank + citations + year, data = data)
View(data)
model <- lm(topic1 ~ journal_rank + citations + year, data = data)
#withstratified permutations, two-sided test
perm_table(data = data, model = model, perm_v = "topic1", strata = "journal",
statistic = "coefficients", perm_n = 500,
alternative = "two.sided", alpha = .01,
seed = 8675309)
#without stratified permutations, two-sided test
perm_table(data = data, model = model, perm_v = "topic1",
statistic = "coefficients", perm_n = 500,
alternative = "two.sided", alpha = .01,
seed = 8675309)
#without stratified permutations, two-sided test
perm_table(data = data, model = model, perm_v = "topic1",
statistic = "coefficients", perm_n = 500,
alternative = "two.sided", alpha = .01,
seed = 8675309)
#withstratified permutations, two-sided test
perm_table(data = data, model = model, perm_v = "topic1", strata_v = "journal",
statistic = "coefficients", perm_n = 500,
alternative = "two.sided", alpha = .01,
seed = 8675309)
getwd()
